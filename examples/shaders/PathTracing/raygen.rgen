#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_buffer_reference : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_shader_explicit_arithmetic_types : enable
#extension GL_EXT_control_flow_attributes : enable
#extension GL_ARB_shader_clock : enable

#include "types.glsl"
#include "constants.glsl"
#include "bindings.glsl"
#include "randoms.glsl"

layout(location = 0) rayPayloadEXT Payload payload;

Ray getCameraRay(inout uint prngState)
{
  const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
  const vec2 screenPos = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
  
  const vec2 offset = vec2(stepAndOutputRNGFloat(prngState), stepAndOutputRNGFloat(prngState)) / vec2(gl_LaunchSizeEXT.xy);
  const vec2 d = (screenPos + offset) * 2.0 - 1.0;
  const vec4 target = sceneParams.mtxProjInv * vec4(d.x, d.y, 1, 1);
  const vec3 direction = (sceneParams.mtxViewInv * vec4(target.xyz, 0)).xyz;

  Ray ray;
  ray.origin = (sceneParams.mtxViewInv * vec4(0, 0, 0, 1)).xyz;
  ray.direction = normalize(direction);
  return ray;
}

vec3 Li(const Ray primaryRay)
{
    const uint flags = gl_RayFlagsOpaqueEXT;

    Ray ray = primaryRay;
    vec3 L = vec3(0.);
    vec3 beta = vec3(1.0);
    bool specularBounce = true;

    [[unroll]]
    for(int depth = 0; depth < MAX_DEPTH; ++depth)
    {
      // intersect ray with scene
      payload.end = true;
      payload.ray = primaryRay;

      traceRayEXT(topLevelAS, flags, 0xFF, 0, 0, 0, ray.origin, tmin + offset, ray.direction, tmax, 0);

      ray = payload.ray;

      // account for infinite lights if ray has no intersection (missed)
      if (payload.end)
      {
        L += beta * payload.radiance;
        break;
      }

      // account for emissive surface if light was not sampled
      L += beta * payload.radiance;

      // skip participating media (TODO:?)
      // do nothing

      // sample direct illumination
      // TODO:
      
      // update
      beta *= payload.bsdf.f / payload.bsdf.pdf;
    }

    return L;
}

vec3 correctNaN(vec3 v)
{
  if (v.x != v.x || v.y != v.y || v.z != v.z)
  {
    return vec3(0.0);
  }

  return v;
}

void main() 
{
  const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
  const vec2 screenPos = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
  const ivec2 imageUV = ivec2(gl_LaunchIDEXT.xy);
  vec2 d = screenPos * 2.0 - 1.0;

  const uint spp = sceneParams.spp;
  
  // init PRNG state
  uint prngState = getRandomState();

  vec3 sum = vec3(0.);
  for (int i = 0; i < spp; ++i)
  {
    const vec3 L = Li(getCameraRay(prngState));

    sum += correctNaN(L);
  }

  sum /= float(spp);

  vec4 prev = imageLoad(poolImage, imageUV);
  float rate = float(spp) / float(spp + sceneParams.untilSPP);
  if (sceneParams.untilSPP == 0)
  {
    prev = vec4(0.0);
    rate = 1.0;
  }

  vec4 final = mix(prev, vec4(sum, 1.0), rate);
  imageStore(poolImage, imageUV, final);

  imageStore(image, imageUV, sqrt(final));
}