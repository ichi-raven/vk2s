#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_buffer_reference : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_shader_explicit_arithmetic_types : enable
#extension GL_EXT_control_flow_attributes : enable

#include "../common/types.glsl"
#include "../common/constants.glsl"
#include "../common/randoms.glsl"
#include "../common/BSDFs.glsl"
#include "../common/pbrtBSDF.glsl"

#include "lights.glsl"
#include "bindings.glsl"

layout(location = 0) rayPayloadEXT Payload payload;
layout(location = 1) rayPayloadEXT bool shadowed;


Ray getCameraRay(inout uint prngState)
{
  const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
  const vec2 screenPos = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
  
  const vec2 offset = vec2(stepAndOutputRNGFloat(prngState), stepAndOutputRNGFloat(prngState)) / vec2(gl_LaunchSizeEXT.xy);
  const vec2 d = (screenPos + offset) * 2.0 - 1.0;
  const vec4 target = sceneParams.mtxProjInv * vec4(d.x, d.y, 1, 1);
  const vec3 direction = (sceneParams.mtxViewInv * vec4(target.xyz, 0)).xyz;

  Ray ray;
  ray.origin = (sceneParams.mtxViewInv * vec4(0, 0, 0, 1)).xyz;
  ray.direction = normalize(direction);
  return ray;
}

bool zero(const vec3 v)
{
  return v.x <= EPS && v.y <= EPS && v.z <= EPS;
}

vec3 sampleLi(const uint sampleIndex)
{
  const uint flags       = gl_RayFlagsOpaqueEXT;
  const uint shadowFlags = gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsOpaqueEXT | gl_RayFlagsSkipClosestHitShaderEXT;

  vec3 L = vec3(0.0);
  vec3 beta = vec3(1.0);
  uint depth = 0;
  bool specularBounce = false;

  // initialize payload
  payload.x = vec3(0.0);
  payload.normal = vec3(0.0);
  payload.Le = vec3(0.0);
  payload.prngState = tea(tea(sceneParams.frame, sampleIndex), uint(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x));
  payload.intersected = true;
  payload.emissive = false;

  // set primary ray
  const Ray primaryRay = getCameraRay(payload.prngState);

  // trace primary ray
  traceRayEXT(TLAS, flags, 0xFF, 0, 0, 0, primaryRay.origin, tmin, primaryRay.direction, tmax, 0);

  while (payload.intersected && !payload.emissive)
  {
    // russian roulette
    const float prr = max(max(beta.x, beta.y), beta.z);
    if (stepAndOutputRNGFloat(payload.prngState) >= prr)
    {
      break;
    }
    beta /= prr;

    if (depth > MAX_DEPTH)
    {
      break;
    }

    if (payload.bsdf.flags == BSDF_FLAGS_FAILED)
    {
      //L = payload.bsdf.f; //DEBUG
      break;
    }

    // update
    ++depth;
    specularBounce = isSpecular(payload.bsdf.flags);
    payload.Le = vec3(0.0);
    payload.emissive = false;
    // update beta
    beta *= payload.bsdf.f * abs(dot(payload.normal, payload.bsdf.wi)) / max(EPS, payload.bsdf.pdf);

    // trace next ray
    traceRayEXT(TLAS, flags, 0xFF, 0, 0, 0, payload.x, tmin, payload.bsdf.wi, tmax, 0);
  }

  // add emissive contribution
  L += beta * payload.Le;

  return L;
}


vec3 sampleLiMIS(const uint sampleIndex)
{
  const uint flags       = gl_RayFlagsOpaqueEXT;
  const uint shadowFlags = gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsOpaqueEXT | gl_RayFlagsSkipClosestHitShaderEXT;

  vec3 L = vec3(0.0);
  vec3 beta = vec3(1.0);
  vec3 wo = vec3(1.0);
  uint depth = 0;
  bool specularBounce = false;

  // initialize payload
  payload.x = vec3(0.0);
  payload.normal = vec3(0.0);
  payload.Le = vec3(0.0);
  payload.prngState = tea(tea(sceneParams.frame, sampleIndex), uint(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x));
  payload.intersected = false;
  payload.emissive = false;

  // set primary ray
  const Ray primaryRay = getCameraRay(payload.prngState);
  wo = primaryRay.direction;
  // trace primary ray
  traceRayEXT(TLAS, flags, 0xFF, 0, 0, 0, primaryRay.origin, tmin, primaryRay.direction, tmax, 0);

  // add emissive contribution only primaly ray
  L += beta * payload.Le;

  while (payload.intersected && !payload.emissive)
  {
    // russian roulette
    {
      const float prr = max(max(beta.x, beta.y), beta.z);
      if (stepAndOutputRNGFloat(payload.prngState) >= prr)
      {
        break;
      }
      beta /= prr;
    }

    // NEE
    if (!isSpecular(payload.bsdf.flags))
    {
      // account emissive surface if prev surface was specular
      LightSample ls = sampleLight(payload.x, payload.prngState);
      // cast shadow ray
      shadowed = true;
      const float dist = length(ls.to);
      traceRayEXT(TLAS, shadowFlags, 0xFF, 0, 0, 1, payload.x, tmin, normalize(ls.to), dist - EPS, 1);

      if (!shadowed)
      {
        const float pathpdf = ls.G * pdfPBRTBSDF(payload.mat, -wo, normalize(ls.to), payload.normal);
        const float cosine = abs(dot(payload.normal, normalize(ls.to)));
        const vec3 f = evalPBRTBSDF(payload.mat, -wo, normalize(ls.to), payload.normal);
        const float MISWeight = ls.pdf / (ls.pdf + pathpdf);
        L += MISWeight * beta * f * ls.G * cosine * ls.L / ls.pdf;
      }
    }
    
    // BSDF
    {
      const Payload cache = payload;
      traceRayEXT(TLAS, flags, 0xFF, 0, 0, 0, cache.x, tmin, cache.bsdf.wi, tmax, 0);
      if (payload.emissive)
      {
        float invG = 0.0;
        float lightpdf = 1.0;
        if (payload.intersected) // hit to emitter
        {
          lightpdf = isSpecular(cache.bsdf.flags) ? 0. : calcHitLightPdf(cache.x, payload.x, payload.normal, payload.area, invG);
        }
        else // hit to infinite emitter (= missed)
        {
          lightpdf = calcInfiniteLightPdf(invG);
        }

        lightpdf *= invG;
        const float cosine = abs(dot(cache.normal, cache.bsdf.wi));
        const float BSDFpdf = cache.bsdf.pdf; 
        const float MISWeight = BSDFpdf / (lightpdf + BSDFpdf);
        L += MISWeight * beta * cache.bsdf.f * cosine * payload.Le / max(EPS, BSDFpdf);
      }

      uint prngStateTmp = payload.prngState;
      payload = cache;
      payload.prngState = prngStateTmp;
    }
    
    if (depth >= MAX_DEPTH)
    {
      break;
    }

    if (payload.bsdf.flags == BSDF_FLAGS_FAILED)
    {
      break;
    }

    // update
    ++depth;
    wo = payload.bsdf.wi;
    specularBounce = isSpecular(payload.bsdf.flags);
    payload.Le = vec3(0.0);
    // update beta
    beta *= payload.bsdf.f * abs(dot(payload.normal, payload.bsdf.wi)) / max(EPS, payload.bsdf.pdf);

    traceRayEXT(TLAS, flags, 0xFF, 0, 0, 0, payload.x, tmin, payload.bsdf.wi, tmax, 0);
  }

  return L;
}

vec3 correct(const vec3 v)
{
  // NaN
  if (v.x != v.x || v.y != v.y || v.z != v.z)
  {
    return vec3(0.0);
  }

  // inf
  clamp(v, vec3(-INFTY), vec3(INFTY));

  return v;
}

// if do MIS, define this
#define MIS
// if test MIS and simple, define above MIS and this
#define MISTEST

void main() 
{
  const ivec2 imageUV = ivec2(gl_LaunchIDEXT.xy);
  const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy);
  const vec2 screenPos = pixelCenter / vec2(gl_LaunchSizeEXT.xy) - vec2(0.5);

  vec3 L = vec3(0.0);
  for (int i = 0; i < sceneParams.spp; ++i)
  {
#ifdef MIS
#ifdef MISTEST
      if (screenPos.x > screenPos.y)
      {
        L += correct(sampleLiMIS(i + sceneParams.untilSPP));
      }
      else
      {
        L += correct(sampleLi(i + sceneParams.untilSPP));
      }
#else 
      L += correct(sampleLiMIS(i + sceneParams.untilSPP));
#endif
#else 
      L += correct(sampleLi(i + sceneParams.untilSPP));
#endif
  }

  L /= float(sceneParams.spp);

  const vec4 prev = imageLoad(poolImage, imageUV);
  float rate = float(sceneParams.spp) / float(sceneParams.spp + sceneParams.untilSPP);
  if (sceneParams.untilSPP == 0)
  {
    rate = 1.0;
  }

  const vec4 final = mix(prev, vec4(L, 1.0), rate);
  imageStore(poolImage, imageUV, final);

  imageStore(image, imageUV, sqrt(final));
}