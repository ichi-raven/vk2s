#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_buffer_reference : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_shader_explicit_arithmetic_types : enable
#extension GL_EXT_control_flow_attributes : enable

#include "types.glsl"
#include "constants.glsl"
#include "bindings.glsl"
#include "randoms.glsl"

layout(location = 0) rayPayloadEXT Payload payload;
layout(location = 1) rayPayloadEXT bool shadowed;

Ray getCameraRay(inout uint prngState)
{
  const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
  const vec2 screenPos = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
  
  const vec2 offset = vec2(stepAndOutputRNGFloat(prngState), stepAndOutputRNGFloat(prngState)) / vec2(gl_LaunchSizeEXT.xy);
  const vec2 d = (screenPos + offset) * 2.0 - 1.0;
  const vec4 target = sceneParams.mtxProjInv * vec4(d.x, d.y, 1, 1);
  const vec3 direction = (sceneParams.mtxViewInv * vec4(target.xyz, 0)).xyz;

  Ray ray;
  ray.origin = (sceneParams.mtxViewInv * vec4(0, 0, 0, 1)).xyz;
  ray.direction = normalize(direction);
  return ray;
}

bool zero(const vec3 v)
{
  return v.x <= EPS && v.y <= EPS && v.z <= EPS;
}

vec3 sampleLi(const uint sampleIndex)
{
    const uint flags = gl_RayFlagsOpaqueEXT;

    uint depth = 0;
    vec3 L = vec3(0.0);
    vec3 beta = vec3(1.0);
    bool specularBounce = false;

    // init random seed
    uint prngState = tea(tea(sceneParams.frame, sampleIndex), uint(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x));
    
    payload.beta = vec3(1.0);
    payload.Le = vec3(0.0);
    payload.end = false;
    payload.ray = getCameraRay(prngState);
    payload.prngState = prngState;

    //[[unroll]]
    //for(int depth = 0; ; ++depth)
    while (!zero(beta))
    {
      // intersect ray with scene
      payload.end = true;
      payload.specularBounce = specularBounce;
      payload.sampledLight = false;

      traceRayEXT(TLAS, flags, 0xFF, 0, 0, 0, payload.ray.origin, tmin + min(float(depth), offset), payload.ray.direction, tmax, 0);

      // account for infinite lights
      if (payload.end)
      {
        L += beta * payload.Le;
        break;
      }

      // account for emissive surface if light was not sampled
      if (!payload.sampledLight || specularBounce)
      {
        L += beta * payload.Le;
      }
      
      // end path if maximum depth reached
      if (++depth > MAX_DEPTH)
      {
        break;
      }

      // TODO: medium intersection

      // sample direct illumination
      if (payload.sampledLight)
      {
        L += beta * payload.ls.f * payload.ls.L / payload.ls.pdf;
      }

      // sample BSDF
      beta *= payload.beta;

      // update
      specularBounce = payload.specularBounce;
    }

    return L;
}

vec3 correctNaN(const vec3 v)
{
  if (v.x != v.x || v.y != v.y || v.z != v.z)
  {
    return vec3(0.0);
  }

  return v;
}

void main() 
{
  const ivec2 imageUV = ivec2(gl_LaunchIDEXT.xy);

  vec3 L = vec3(0.);
  for (int i = 0; i < sceneParams.spp; ++i)
  {
    L += correctNaN(sampleLi(i + sceneParams.untilSPP));
  }

  L /= float(sceneParams.spp);

  const vec4 prev = imageLoad(poolImage, imageUV);
  float rate = float(sceneParams.spp) / float(sceneParams.spp + sceneParams.untilSPP);
  if (sceneParams.untilSPP == 0)
  {
    rate = 1.0;
  }

  const vec4 final = mix(prev, vec4(L, 1.0), rate);
  imageStore(poolImage, imageUV, final);

  imageStore(image, imageUV, sqrt(final));
}