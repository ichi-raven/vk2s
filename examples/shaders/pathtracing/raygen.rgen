#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_buffer_reference : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_shader_explicit_arithmetic_types : enable
#extension GL_EXT_control_flow_attributes : enable

#include "../common/types.glsl"
#include "../common/constants.glsl"
#include "../common/randoms.glsl"
#include "../common/BSDFs.glsl"
#include "../common/DisneyBSDF.glsl"
#include "../common/lights.glsl"

#include "bindings.glsl"

layout(location = 0) rayPayloadEXT Payload payload;
layout(location = 1) rayPayloadEXT bool shadowed;


Ray getCameraRay(inout uint prngState)
{
  const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
  const vec2 screenPos = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
  
  const vec2 offset = vec2(stepAndOutputRNGFloat(prngState), stepAndOutputRNGFloat(prngState)) / vec2(gl_LaunchSizeEXT.xy);
  const vec2 d = (screenPos + offset) * 2.0 - 1.0;
  const vec4 target = sceneParams.mtxProjInv * vec4(d.x, d.y, 1, 1);
  const vec3 direction = (sceneParams.mtxViewInv * vec4(target.xyz, 0)).xyz;

  Ray ray;
  ray.origin = (sceneParams.mtxViewInv * vec4(0, 0, 0, 1)).xyz;
  ray.direction = normalize(direction);
  return ray;
}

bool zero(const vec3 v)
{
  return v.x <= EPS && v.y <= EPS && v.z <= EPS;
}

vec3 sampleLi(const uint sampleIndex)
{
  const uint flags       = gl_RayFlagsOpaqueEXT;
  const uint shadowFlags = gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsOpaqueEXT | gl_RayFlagsSkipClosestHitShaderEXT;

  // for debug (if true, do NEE)
  const bool NEE = false;

  vec3 L = vec3(0.0);
  vec3 beta = vec3(1.0);
  uint depth = 0;
  bool specularBounce = true;

  // initialize payload
  payload.x = vec3(0.0);
  payload.normal = vec3(0.0);
  payload.Le = vec3(0.0);
  payload.prngState = tea(tea(sceneParams.frame, sampleIndex), uint(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x));
  payload.intersected = true;

  // for Disney BSDF
  payload.state.isRefracted = false;
  payload.state.hasBeenRefracted = false;
  payload.state.lastIOR = 1.0;

  // set primary ray
  const Ray primaryRay = getCameraRay(payload.prngState);
  vec3 wo = primaryRay.direction;

  // trace primary ray
  traceRayEXT(TLAS, flags, 0xFF, 0, 0, 0, primaryRay.origin, tmin, primaryRay.direction, tmax, 0);

  while (payload.intersected)
  {    
    // account emissive surface if prev surface was specular
    if (!NEE || specularBounce)
    {
      L += beta * payload.Le;
      payload.Le = vec3(0.0);
    }
    // NEE if bsdf has nonspecular 
    if (NEE && isNonSpecular(payload.bsdf.flags))
    {
      LightSample ls = sampleLight(payload.x, payload.prngState);
      // cast shadow ray
      shadowed = true;
      const float dist = length(ls.to);
      traceRayEXT(TLAS, shadowFlags, 0xFF, 0, 0, 1, payload.x, tmin, normalize(ls.to), dist - EPS, 1);

      if (!shadowed)
      {
        //const vec3 f = payload.bsdf.f * abs(dot(ls.to, payload.normal));
        float forwardPdf, reversePdf;
        const vec3 f = EvaluateDisneyBSDF(payload.mat, -wo, ls.to, payload.normal, false, forwardPdf, reversePdf);
        L += beta * f * ls.L / ls.pdf;
      }
    }

    // russian roulette
    const float prr = max(max(beta.x, beta.y), beta.z);
    if (stepAndOutputRNGFloat(payload.prngState) >= prr)
    {
      break;
    }

    if (depth > MAX_DEPTH || payload.bsdf.flags == BSDF_FLAGS_FAILED)
    {
      break;//or return BLACK
    }

    // update
    ++depth;
    wo = payload.bsdf.wi;
    specularBounce = isSpecular(payload.bsdf.flags);
    const float invPrr = 1. / prr;
    beta *= invPrr * payload.bsdf.f;// / payload.bsdf.forwardPdfW;
    if (payload.state.hasBeenRefracted && !payload.state.isRefracted) 
    {
      payload.state.lastIOR = 1.;
    }

    // trace next ray
    traceRayEXT(TLAS, flags, 0xFF, 0, 0, 0, payload.x, tmin, payload.bsdf.wi, tmax, 0);
  }

  L += beta * payload.Le;

  return L;
}

vec3 correct(const vec3 v)
{
  const float pos_infinity = uintBitsToFloat(0x7F800000);
  const float neg_infinity = uintBitsToFloat(0xFF800000);

  // NaN
  if (v.x != v.x || v.y != v.y || v.z != v.z)
  {
    return vec3(0.0);
  }

  // inf
  //clamp(v, vec3(-INFTY), vec3(INFTY));

  // const float pos_infinity = uintBitsToFloat(0x7F800000);
  // const float neg_infinity = uintBitsToFloat(0xFF800000);
  // if (v.x >= pos_infinity || v.y >= pos_infinity || v.z >= pos_infinity)
  // {
  //   return vec3(0.0);
  // }

  // if (v.x <= neg_infinity || v.y <= neg_infinity || v.z <= neg_infinity)
  // {
  //   return vec3(0.0);
  // }

  return v;
}

void main() 
{
  const ivec2 imageUV = ivec2(gl_LaunchIDEXT.xy);

  vec3 L = vec3(0.);
  [[unroll]]
  for (int i = 0; i < sceneParams.spp; ++i)
  {
    L += correct(sampleLi(i + sceneParams.untilSPP));
  }

  L /= float(sceneParams.spp);

  const vec4 prev = imageLoad(poolImage, imageUV);
  float rate = float(sceneParams.spp) / float(sceneParams.spp + sceneParams.untilSPP);
  if (sceneParams.untilSPP == 0)
  {
    rate = 1.0;
  }

  const vec4 final = mix(prev, vec4(L, 1.0), rate);
  imageStore(poolImage, imageUV, final);

  imageStore(image, imageUV, sqrt(final));
}